syntax = "proto3";

package paper;

// 试卷服务
service PaperService {
  // 试卷管理
  rpc FindById(FindByIdRequest) returns (PaperResponse);
  rpc FindMany(FindManyRequest) returns (PaperListResponse);
  rpc Create(CreatePaperRequest) returns (PaperResponse);
  rpc Update(UpdatePaperRequest) returns (PaperResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  
  // 组卷操作
  rpc AddQuestions(AddQuestionsRequest) returns (PaperResponse);
  rpc RemoveQuestions(RemoveQuestionsRequest) returns (PaperResponse);
  rpc ReorderQuestions(ReorderQuestionsRequest) returns (PaperResponse);
  
  // 智能组卷
  rpc SmartGenerate(SmartGenerateRequest) returns (PaperResponse);
  rpc GenerateMultiple(GenerateMultipleRequest) returns (PaperListResponse);
  
  // 模拟卷管理
  rpc CreateMockPaper(CreateMockPaperRequest) returns (PaperResponse);
  rpc GetMockPapers(GetMockPapersRequest) returns (PaperListResponse);
  
  // 试卷统计
  rpc GetPaperStats(GetStatsRequest) returns (PaperStatsResponse);
}

// 通用请求
message FindByIdRequest {
  string id = 1;
}

message FindManyRequest {
  int32 page = 1;
  int32 limit = 2;
  string search = 3;
  string type = 4; // 'normal' | 'mock' | 'template'
  string categoryId = 5;
  string creatorId = 6;
}

message DeleteRequest {
  string id = 1;
}

// 试卷相关请求
message CreatePaperRequest {
  string title = 1;
  string description = 2;
  string type = 3; // 'normal' | 'mock' | 'template'
  int32 totalScore = 4;
  int32 duration = 5; // 考试时长（分钟）
  int32 passScore = 6; // 及格分数
  string categoryId = 7;
  repeated PaperQuestionInput questions = 8;
}

message UpdatePaperRequest {
  string id = 1;
  optional string title = 2;
  optional string description = 3;
  optional int32 totalScore = 4;
  optional int32 duration = 5;
  optional int32 passScore = 6;
  optional string categoryId = 7;
}

message PaperQuestionInput {
  string questionId = 1;
  int32 order = 2;
  int32 score = 3;
}

// 组卷操作请求
message AddQuestionsRequest {
  string paperId = 1;
  repeated PaperQuestionInput questions = 2;
}

message RemoveQuestionsRequest {
  string paperId = 1;
  repeated string questionIds = 2;
}

message ReorderQuestionsRequest {
  string paperId = 1;
  repeated QuestionOrder questionOrders = 2;
}

message QuestionOrder {
  string questionId = 1;
  int32 newOrder = 2;
}

// 智能组卷请求
message SmartGenerateRequest {
  string title = 1;
  string categoryId = 2;
  int32 totalScore = 3;
  repeated QuestionTypeConfig questionTypes = 4;
  repeated string knowledgePointIds = 5;
  string difficulty = 6; // 'easy' | 'medium' | 'hard' | 'mixed'
}

message QuestionTypeConfig {
  string type = 1; // 'single' | 'multiple' | 'judge' | 'fill' | 'essay'
  int32 count = 2;
  int32 scorePerQuestion = 3;
}

message GenerateMultipleRequest {
  SmartGenerateRequest baseConfig = 1;
  int32 count = 2; // 生成数量（AB卷）
  bool randomize = 3; // 是否随机题目
}

// 模拟卷请求
message CreateMockPaperRequest {
  string title = 1;
  string description = 2;
  string categoryId = 3;
  string year = 4; // 年份（如：2024）
  string source = 5; // 来源（如：历年真题）
  repeated PaperQuestionInput questions = 6;
}

message GetMockPapersRequest {
  string categoryId = 1;
  string year = 2;
  int32 page = 3;
  int32 limit = 4;
}

// 统计请求
message GetStatsRequest {
  string paperId = 1;
}

// 响应消息
message PaperResponse {
  string id = 1;
  string title = 2;
  string description = 3;
  string type = 4;
  int32 totalScore = 5;
  int32 duration = 6;
  int32 passScore = 7;
  string categoryId = 8;
  string categoryName = 9;
  int32 questionCount = 10;
  string creatorId = 11;
  string creatorName = 12;
  repeated PaperQuestion questions = 13;
  string createdAt = 14;
  string updatedAt = 15;
}

message PaperQuestion {
  string id = 1;
  string questionId = 2;
  string questionType = 3;
  string questionContent = 4;
  int32 order = 5;
  int32 score = 6;
}

message PaperListResponse {
  repeated PaperResponse papers = 1;
  int32 total = 2;
  int32 page = 3;
  int32 limit = 4;
}

message PaperStatsResponse {
  string paperId = 1;
  int32 totalAttempts = 2; // 总答题人数
  double averageScore = 3; // 平均分
  double passRate = 4; // 通过率
  int32 totalScore = 5;
  int32 questionCount = 6;
  repeated QuestionStats questionStats = 7;
}

message QuestionStats {
  string questionId = 1;
  double correctRate = 2;
  int32 totalAttempts = 3;
}

message DeleteResponse {
  bool success = 1;
  string message = 2;
}

